#version 450

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (constant_id = 0) const uint BUFFER_ELEMENTS = 32;

struct Matrix {
	float values[3*3];
};

layout ( push_constant ) uniform InT {
	Matrix matrix[2];
} mtx_in;

layout(binding = 0) buffer OutT {
    Matrix matrix[2];
} mtx_out;


uint fibonacci(uint n) {
	if(n <= 1){
		return n;
	}
	uint curr = 1;
	uint prev = 1;
	for(uint i = 2; i < n; ++i) {
		uint temp = curr;
		curr += prev;
		prev = temp;
   }
	return curr;
}

uint mindex(uint irow, uint icol) {
	return irow*3 + icol;
}

void main() 
{
	uint index = gl_GlobalInvocationID.x;
	if (index >= 32) 
		return;	
	// values[index] = values[index] * 2.0;

	for(int k=0; k<2; k++) {
		for(int i=0; i<3; i++) {
			for(uint j=0; j<3; j++) {
				mtx_out.matrix[k].values[mindex(i, j)] = mtx_in.matrix[k].values[mindex(i, j)];
			}
		}
	}
}